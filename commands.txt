planned
-------
- for each column (ジマ)

１２３４５６７８９０ - numbers
。．　　　　　　　　 - decimals (mapped to 。 in the source code)
ー　　　　　　　　　 - negative numbers
シ　　　　　　　　　 - exponential
イ　　　　　　　　　 - complex
、　　　　　　　　　 - number list (only if it comes directly after a number; otherwise, a function)

「。「。」 - normal string (mapped by ka2sym.py)
「。。。ア - codepage index
「。。。エ - unmapped string (as appears in source code)
「。。。イ - dictionary compressed string
「。。。オ - base 250 integer literal

」。 - character literal

ア　　 - add
ミ　　 - minus
ム　　 - multiplication
ディ　 - true division
ヂ    - floor division
％　　 - modulo
ラ　　 - range; [1 .. z], [0 .. z], [[1 .. 1+bi], [2 .. 2+bi], ..., [a .. a+bi]], [[0 .. bi], [-1 .. -1+bi], ..., [a .. a+bi]]; chr cast to int
レ　　 - range; [0 .. z], [-1 .. z], ...
リ　　 - range; [1 .. z-1], [0 .. z+1], ...
ロ　　 - range; [0 .. z-1], [-1 .. z+1], ...
ン　　 - increment
デ　　 - decrement
ネ　　 - negative / swap case
ヌ　　 - length (number of) for lists / strings, digit count for integers (vectorizes over sequences), behavior is deterministic but probably not useful for non-integer numbers
ポ　　 - get element of y at index x; vectorizes on the left. complex numbers attempt to get list[real][imag] unless that errors, in which case it gives [list[real], list[imag]]. 1-indexed. wraps around.
、　　 - pair
ｒ　　 - push the register
Ｒ　　 - set the register to the TOS
ドゥ　 - duplicate
＠　　 - swap top two
パ　　 - append
タ　　 - tack (reverse append)
ス　　 - split*, split the TOS by the second item (expects a list or sequence to split) (splitting a sequence returns a sequence of lists, so the last one will probably not generate properly - use sequence cut if you want a sequence of sequences)
ッス　 - split on sublist occurence
ッパ　 - prefixes
ッペ　 - permutations
ジ　　 - zip
ッタ　 - tail*
ジョ　 - join* (if either isn't a list/seq, it will be the join argument, otherwise, the TOS is)
ソ　　 - sort

コ　　 - apply the next function to the complex component of the number (formally, isolate the imag component of the first argument as a real, run, multiply by I, add the real component back)
＄　　 - bind the next two functions with the arity of the first
マ　　 - map (for each of first argument; numbers -> range according to ラ); if the mapped function yields multiple outputs to the stack, they are all given
メ　　 - map over second argument
オ　　 - previous line
ウ　　 - next line
？　　 - ?abc - apply a, but push back the elements that it consumes, then check the TOS, and if it's truthy, run b, otherwise, run c
フ；　 - function - bind until ; using arity of the first item
モ　　 - alias for マフ
ップ　 - outer product table (alias for メマ)
ル　　 - apply the next function to the global register (open a temporary stack with the register, call, set TOS or 0 to the register)
ヴェ　 - vectorize once

* infer the argument order; in most cases, one argument should be a list and one a number/something, so if they are in the wrong order, it will infer. you can likely work around this with wrap or range, etc
